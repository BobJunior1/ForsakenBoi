Duration()
end

shootButton.Activated:Connect(onShootButtonPressed)
   endlocal Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "B0bbyHub / Forsaken (BETA)",
   Icon = 99972211610543, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "î€€B0bbyhub / Forsaken (BETA)",
   LoadingSubtitle = "Loading..",
   Theme = "AmberGlow", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Ignorethis"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Is Bob Cool?",
      Subtitle = "Yes or no?",
      Note = "Hint: Yes (the first letter is capital)", -- Use this to tell the user how to get a key
      FileName = "SkibdiBobbyKey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Yes"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Main", 101314838915929) -- Title, Image

local Section = Tab:CreateSection("Esp")

local Button = Tab:CreateButton({
   Name = "Killer Esp",
   Callback = function()
local Players = game.Workspace:WaitForChild("Players")
local RunService = game:GetService("RunService")

local function createOutlineESP(model, outlineColor, fillColor)
    local highlight = model:FindFirstChild("Highlight")
    if not highlight then
        highlight = Instance.new("Highlight")
        highlight.Parent = model
        highlight.Adornee = model
    end
    highlight.FillTransparency = 0.75
    highlight.FillColor = fillColor
    highlight.OutlineColor = outlineColor
    highlight.OutlineTransparency = 0
end

local function createBillboardGui(target, text, color)
    local billboardGui = target:FindFirstChildOfClass("BillboardGui")
    if not billboardGui then
        billboardGui = Instance.new("BillboardGui")
        billboardGui.Adornee = target
        billboardGui.Size = UDim2.new(0, 100, 0, 25)
        billboardGui.AlwaysOnTop = true
        billboardGui.Parent = target.Parent

        local textLabel = Instance.new("TextLabel")
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.TextScaled = true
        textLabel.TextColor3 = color
        textLabel.Text = text
        textLabel.Font = Enum.Font.Antique
        textLabel.Parent = billboardGui
    else
        billboardGui.TextLabel.Text = text
        billboardGui.TextLabel.TextColor3 = color
        billboardGui.TextLabel.Font = Enum.Font.Antique
    end
end

local function applyHighlighting(model)
    local humanoid = model:FindFirstChildOfClass("Humanoid")
    if humanoid and model:FindFirstChild("HumanoidRootPart") then
        createOutlineESP(model, Color3.fromRGB(128, 0, 0), Color3.fromRGB(64, 0, 0))  -- Dark red colors
        createBillboardGui(model:FindFirstChild("HumanoidRootPart"), model.Name, Color3.fromRGB(128, 0, 0))  -- Dark red color
    end
end

local function highlightKillers()
    local killersGroup = Players:FindFirstChild("Killers")
    if killersGroup then
        for _, killer in pairs(killersGroup:GetChildren()) do
            applyHighlighting(killer)
        end
    end
end

-- Initial application of highlighting to existing killers
highlightKillers()

-- Event listeners to apply/remove highlighting when killers are added or removed
Players.DescendantAdded:Connect(function(descendant)
    if descendant.Parent and descendant.Parent.Name == "Killers" then
        applyHighlighting(descendant)
    end
end)

Players.DescendantRemoving:Connect(function(descendant)
    if descendant:IsA("Model") and descendant.Name == "Killers" then
        -- Reapply highlighting when the killer reappears
        descendant.AncestryChanged:Connect(function(_, parent)
            if parent then
                applyHighlighting(descendant)
            end
        end)
    end
end)
   end,
})

local Button = Tab:CreateButton({
   Name = "Generator Esp",
   Callback = function()
   local function createOutline(item)
    local Highlight = Instance.new('Highlight')
    Highlight.Parent = item
    Highlight.Adornee = item
    Highlight.OutlineColor = Color3.new(1, 1, 1)
    Highlight.FillColor = Color3.new(0, 0, 0)
    Highlight.FillTransparency = 0.5
end
local function applyESP(item)
    if item:IsA('Model') and item.Name == 'Generator' then
        createOutline(item)
    end
end
for _, v in ipairs(game.Workspace:GetDescendants()) do
    applyESP(v)
end
game.Workspace.DescendantAdded:Connect(function(descendant)
    applyESP(descendant)
end)
game.Workspace.DescendantRemoving:Connect(function(descendant)
    if descendant:IsA('Highlight') then
        descendant:Destroy()
    end
end)
   end,
})

local Button = Tab:CreateButton({
   Name = "Player Esp",
   Callback = function()
local Players = game:GetService("Players")

local function createOutlineESP(model, outlineColor, fillColor)
    if model and not model:FindFirstChildOfClass("Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.Parent = model
        highlight.Adornee = model
        highlight.FillTransparency = 0.75
        highlight.FillColor = fillColor
        highlight.OutlineColor = outlineColor
        highlight.OutlineTransparency = 0 
    end
end

local function createHealthIndicator(character, textColor)
    local head = character:FindFirstChild("Head")
    if head and not head:FindFirstChild("HealthGui") then
        local healthGui = Instance.new("BillboardGui")
        healthGui.Name = "HealthGui"
        healthGui.Size = UDim2.new(0, 100, 0, 30)
        healthGui.AlwaysOnTop = true
        healthGui.MaxDistance = math.huge
        healthGui.Parent = head

        local healthLabel = Instance.new("TextLabel")
        healthLabel.Size = UDim2.new(1, 0, 1, 0)
        healthLabel.BackgroundTransparency = 1
        healthLabel.TextScaled = true
        healthLabel.Text = ""
        healthLabel.TextColor3 = textColor
        healthLabel.Font = Enum.Font.Antique  -- Set the font to Antique
        healthLabel.Parent = healthGui
    end
end

local function updateHealthIndicators()
    for _, player in Players:GetPlayers() do
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            local head = character:FindFirstChild("Head")
            if humanoid and head then
                local textColor = humanoid.MaxHealth > 500 and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(255, 255, 255) -- Red if max HP > 500
                createHealthIndicator(character, textColor)
                
                local healthGui = head:FindFirstChild("HealthGui")
                if healthGui then
                    local healthLabel = healthGui:FindFirstChildOfClass("TextLabel")
                    if healthLabel then
                        healthLabel.Text = math.floor(humanoid.Health) .. "/" .. humanoid.MaxHealth
                        healthLabel.TextColor3 = textColor
                    end
                end
            end
        end
    end
end

local function applyESPToPlayers()
    for _, player in Players:GetPlayers() do
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local fillColor = Color3.fromRGB(128, 128, 128) -- Light grey fill color
                local outlineColor = Color3.fromRGB(255, 255, 255) -- White outline color

                createOutlineESP(character, outlineColor, fillColor)
                createHealthIndicator(character, outlineColor)
            end
        end
    end
end

-- Initial application of ESP to existing players
applyESPToPlayers()

-- Event listeners to apply/remove ESP when players are added or removed
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        wait(1)  -- Give time for character to fully load
        applyESPToPlayers()
    end)
end)

Players.PlayerRemoving:Connect(function(player)
    local character = player.Character
    if character then
        local highlight = character:FindFirstChildOfClass("Highlight")
        if highlight then
            highlight:Destroy()
        end

        local head = character:FindFirstChild("Head")
        if head then
            local healthGui = head:FindFirstChild("HealthGui")
            if healthGui then
                healthGui:Destroy()
            end
        end
    end
end)

-- Periodically update health indicators and ESP
while true do
    applyESPToPlayers()
    updateHealthIndicators()
    wait(3)
end
   end,
})

local Button = Tab:CreateButton({
   Name = "Esp Items",
   Callback = function()
   local Workspace = game:GetService("Workspace")

local function createHighlight(model, outlineColor, fillColor)
    if model and not model:FindFirstChildOfClass("Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.Parent = model
        highlight.Adornee = model
        highlight.FillTransparency = 0.75
        highlight.FillColor = fillColor
        highlight.OutlineColor = outlineColor
        highlight.OutlineTransparency = 0
    end
end

local function createBillboardGui(target, text, color)
    if target and not target:FindFirstChildOfClass("BillboardGui") then
        local billboardGui = Instance.new("BillboardGui")
        billboardGui.Adornee = target
        billboardGui.Size = UDim2.new(0, 100, 0, 25)
        billboardGui.AlwaysOnTop = true
        billboardGui.Parent = target

        local textLabel = Instance.new("TextLabel")
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.TextScaled = true
        textLabel.TextColor3 = color
        textLabel.Text = text
        textLabel.Font = Enum.Font.Antique  -- Set the font to Antique
        textLabel.Parent = billboardGui
    end
end

local function applyHighlighting(item)
    local targetPart = item:IsA("Model") and item:FindFirstChildWhichIsA("BasePart")
    if targetPart then
        local color
        if item.Name == "BloxyCola" then
            color = Color3.fromRGB(204, 153, 0)  -- Dark yellow
        elseif item.Name == "Medkit" then
            color = Color3.fromRGB(128, 0, 128)  -- Purple
        else
            return  -- Skip other items
        end
        createHighlight(targetPart, color, color)
        createBillboardGui(targetPart, item.Name, color)
    end
end

local function highlightItems()
    for _, item in pairs(Workspace:GetDescendants()) do
        if item:IsA("Model") and (item.Name == "BloxyCola" or item.Name == "Medkit") then
            applyHighlighting(item)
        end
    end
end

-- Initial application of highlighting to existing items
highlightItems()

-- Event listener for new items
Workspace.DescendantAdded:Connect(function(descendant)
    if descendant:IsA("Model") and (descendant.Name == "BloxyCola" or descendant.Name == "Medkit") then
        wait(1)  -- Give time for the item to fully load
        applyHighlighting(descendant)
    end
end)

-- Event listener for removing highlighting when items are removed
Workspace.DescendantRemoving:Connect(function(descendant)
    if descendant:IsA("Model") then
        local highlight = descendant:FindFirstChildOfClass("Highlight")
        if highlight then
            highlight:Destroy()
        end

        local billboardGui = descendant:FindFirstChildOfClass("BillboardGui")
        if billboardGui then
            billboardGui:Destroy()
        end
    end
end)
   end,
})

local Button = Tab:CreateButton({
   Name = "Delayed Auto fix generator (10 Second Delay)",
   Callback = function()
   while true do
for i, v in pairs(game.Workspace.Map.Ingame.Map:GetChildren()) do
    if v.Name == "Generator" then
        v:WaitForChild("Remotes"):WaitForChild("RE"):FireServer()
    end
end
wait(10)
end
   end,
})

local Button = Tab:CreateButton({
   Name = "Delayed Auto fix generator (5 Second Delay)",
   Callback = function()
   while true do
for i, v in pairs(game.Workspace.Map.Ingame.Map:GetChildren()) do
    if v.Name == "Generator" then
        v:WaitForChild("Remotes"):WaitForChild("RE"):FireServer()
    end
end
wait(5)
end
   end,
})

local Button = Tab:CreateButton({
   Name = "Chance Aimbot",
   Callback = function()
   local player = game.Players.LocalPlayer
local mouse = player:GetMouse()
local camlockEnabled = false
local targetObject = nil

function getTargetObject()
    local killersFolder = workspace:WaitForChild("Players"):WaitForChild("Killers")
    local closestObject = nil
    local closestDistance = math.huge
    for _, v in pairs(killersFolder:GetChildren()) do
        if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") then
            local screenPosition = workspace.CurrentCamera:WorldToScreenPoint(v.HumanoidRootPart.Position)
            local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(screenPosition.X, screenPosition.Y)).magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestObject = v
            end
        end
    end
    return closestObject
end

function enableCamlockForDuration()
    targetObject = getTargetObject()
    if targetObject then
        camlockEnabled = true
        delay(2, function()
            camlockEnabled = false
            targetObject = nil
        end)
    end
end

game:GetService("RunService").RenderStepped:Connect(function()
    if camlockEnabled and targetObject and targetObject:FindFirstChild("HumanoidRootPart") then
        workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, targetObject.HumanoidRootPart.Position)
    end
end)

local playerGui = player:WaitForChild("PlayerGui")
local mainUI = playerGui:WaitForChild("MainUI")
local abilityContainer = mainUI:WaitForChild("AbilityContainer")
local shootButton = abilityContainer:WaitForChild("Shoot")

local function onShootButtonPressed()
    enableCamlockForDuration()
end

shootButton.Activated:Connect(onShootButtonPressed)
   end,
})
